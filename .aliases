#!/usr/bin/env bash

colorflag="-G"
alias ls="command ls -lFG"
alias la="ls -laFG"
alias cat='bat'
alias grep='grep --color=auto'

alias agg="ag -C 2 --ignore-dir={.git,log,node_modules,vendor,tmp,angular,*.js} $1"
alias preview="fzf --preview 'bat --color \"always\" {}'"

alias dl='cd ~/Downloads'
alias projects='cd /Users/mbigorne/projects'
alias dotfiles='cd /Users/mbigorne/projects/dotfiles'

alias java8='setjdk 1.8'
alias java10='setjdk 10'
alias gl="git lg -n 10"
alias brew-update='brew update && brew upgrade && brew cleanup && brew doctor && terminal-notifier -title Brew -message "Upgrade finished"'

# Servio
alias servio='cd /Users/mbigorne/projects/servio'
alias ng-run-candidat='servio && cd portail-candidat && ./node_modules/.bin/ng run candidat:serve'
alias ng-run-gestion='servio && cd portail-candidat && ./node_modules/.bin/ng run gestion:serve'
alias cluster-dev='kubectx dev && gcloud config configurations activate dev'
alias cluster-recette='kubectx recette && gcloud config configurations activate recette'
alias cluster-preprod='kubectx preprod && gcloud config configurations activate preprod'
alias start-env='servio && docker-compose up -d db pubsub'
alias proxy-db-dev='servio && docker-compose up -d db-proxy-dev'
alias proxy-db-rec='servio && docker-compose up -d db-proxy-rec'
alias proxy-db-preprod='servio && docker-compose up -d db-proxy-preprod'

# Kubernetes
alias k='kubectl'
alias kdebug='kubectl run test --rm --restart=Never -it --image=ubuntu -- bash'

complete -o default -F __start_kubectl k # Add tab completion for alias k

alias _inline_fzf="fzf --multi --ansi -i -1 --height=50% --reverse -0 --header-lines=1 --inline-info --border"
alias _inline_fzf_nh="fzf --multi --ansi -i -1 --height=50% --reverse -0 --inline-info --border"

function klog() {
    local line_count=10
    if [[ $1 =~ ^[-]{0,1}[0-9]+$ ]]; then
        line_count="$1"
        shift
    fi

    arg_pair=$(kubectl get po --all-namespaces | _inline_fzf | awk '{print $1, $2}')
    pods_out=$(echo "$arg_pair" | xargs kubectl get po -o=jsonpath='{.spec.containers[*].name}' -n)
    pod_choosen=$(echo "$pods_out" |  tr ' ' "\n" | _inline_fzf_nh)
    echo kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" "$@"
    eval kubectl logs -n "${arg_pair} -c ${pod_choosen}" --tail="${line_count}" "$@"
}


function kget() {
    case "$1" in
    # TODO Add more
    nodes|no|node|ns|namespace|namespaces)
        kubectl get "${1}" | _inline_fzf | awk '{print $1}' | xargs kubectl get -o yaml "${1}"
    ;;
    *)
        kubectl get "${1}" --all-namespaces | _inline_fzf | awk '{print $1, $2}' | xargs kubectl get -o yaml "${1}" -n
    ;;
    esac
}
